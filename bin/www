#!/usr/bin/env node

/**
 * Module dependencies.
 */
const env = require('node-env-file');
if(!process.env.NODE_ENV === 'production'){
    env(__dirname + '/.env')
}
const DATABASE = process.env.NODE_ENV === 'production'?process.env.DATABASE:process.env.DATABASE1;
const mongoose = require('mongoose');
mongoose.connect(DATABASE);
mongoose.Promise = global.Promise; // Tell Mongoose to use ES6 promises
mongoose.connection.on('error', (err) => {
    console.error(`ðŸ™… ðŸš« ðŸ™… ðŸš« ðŸ™… ðŸš« ðŸ™… ðŸš« â†’ ${err.message}`);
});
require('../models/User');
const User = mongoose.model('User')

const io = require('socket.io')();
const content = require('../app')(io);
const app = content.app;
const smooch = content.smooch;
const debug = require('debug')('jwttest:server');
const http = require('http');
// this code needs to be modularized pronto.
io.on('connect', (socket) => {
    socket.join('testRoom');
    socket.on('message', (message) => {
        smooch.appUsers.sendMessage(message.id, {
            text: message.msg,
            role: 'appMaker',
            name: 'drew willis',
            avatarUrl: 'https://cdn0.iconfinder.com/data/icons/iconshock_guys/512/andrew.png',
            type: 'text'
        }).then(() => {
            console.log('lets see what happens on the console')
        }).catch(err => {
            if (err.status = 404) {
                console.log('hey the status code is indeed 404 and we are golden')
                User.remove({
                    smoochId: message.id
                }).then(res => {
                    socket.emit('reset', {
                        dummy: "text"
                    })
                    console.log('res is:  ', res)
                }).catch(err => {
                    console.log('curious to see how this is gonna work out.')
                })
            } else {
                console.log('err is', err)
            }
        })
    })
});


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
io.attach(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}